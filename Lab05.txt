#______________________1 a______________________
def factorial(num):
  if num==1 or num==0:
    return 1
  return num*factorial(num-1)
print(factorial(0))

#______________________1 b______________________

def Fibonacci(num):
    if num == 0:
        return 0
    elif num == 1:
        return 1
    else:
        return Fibonacci(num-1)+Fibonacci(num-2)

print(Fibonacci(8))

#______________________1 c______________________
def printarray(array):
    if array == []:
        return 
    else:
        print(array[0], end = " ")
        return printarray(array[1:])
        
printarray([10,20,30,40,50,'hi','i','am','Priyam'])

#______________________1 d______________________
def pow(base, n):
  if n==1:
    return base
  elif n==0:
    return 1
  else:
    return pow(base,1)* pow(base,(n-1))

print(pow(2,0)) 

#______________________2 a______________________

def decimaltObinary(num):
    if num == 0:
        return 0
    else:
        return num%2+10*decimaltObinary(int(num/2))

print(decimaltObinary(10))  

#______________ for 2 no class __________________

class Node:
  def __init__(self, value, next=None):
      self.value = value
      self.next = next

class MyList:
  def __init__ (self, num):
      self.head=None

      for i in num:
          n=Node(i,None)
          if self.head ==None:
              self.head=n
              tail=n
          else:
              tail.next=n
              tail=n

l1=MyList([10,20,30,40,50,60,70,80,90,100])
node_val= (l1.head)

#______________________2 b______________________

def add_node_value(head):
    if head==None:
        return 0
    return head.value+add_node_value(head.next)

print(add_node_value(node_val))

#______________________2 c______________________
def reversePrint(head):
    if head ==None:
        return None
    else:
        reversePrint(head.next)
        print(head.value,end=' ')

reversePrint(node_val)

#______________________3 no______________________
def hocBuilder(height):
    if height==0:
        return 0
    elif height==1:
        return 8
    return hocBuilder(height-1) +5

print(hocBuilder(int(input("Enter height of a house of cards:"))))

#______________________4 a______________________

def row(num,i=0):
    if num==i:
        return 0
    else:
        print(i+1,end=" ")
        return row(num,i+1)

def column(num,i=0):
    if num==i:
        return 0
    else:
        row(i+1)
        print()
        column(num,i+1)

column(int(input('Enter the row/column no: ')))

#______________________4 b______________________


def row(num,i=0):
    if num==i:
        return 0
    else:
        print(i+1,end=" ")
        return row(num,i+1)

def column(num,i=0):
    if num==i:
        return 0
    else:
        space(num-i)
        row(i+1)
        print()
        column(num,i+1)


def space(num,i=0):
    if num==i:
        return 0
    else:
        print(" ",end=" ")
        return space(num,i+1)

column(int(input('Enter the row/column no: ')))

#______________________5 no______________________


class FinalQ:
  def print(self,array,idx):
      if(idx<len(array)):
          profit = self.calcProfit(array[idx])
          print(f"Investment: {array[idx]}; Profit: {profit}")
          self.print(array, idx +1)

  def calcProfit(self,investment):
        if investment%100!= 0:
            return "Index out of range.It's not multiple of 100"
        elif investment<25000:
            return "Unsufficient ammount.Invested money must be greater or equal to 25000"
        elif investment==25000:
            return 0.0
        elif investment<=100000 and investment>25000:
            return 45.0+self.calcProfit(investment-1000)
        else:
            return 80.0+self.calcProfit(investment-1000)


array=[25000,100000,250000,350000,25003,24000]
profit = FinalQ()
profit.print(array,0)
      